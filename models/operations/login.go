// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/test-ryan-3/models/components"
	"net/http"
)

type LoginSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

func (o *LoginSecurity) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *LoginSecurity) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type Type string

const (
	TypeAPIKey Type = "apiKey"
	TypeJwt    Type = "JWT"
)

func (e Type) ToPointer() *Type {
	return &e
}

func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "apiKey":
		fallthrough
	case "JWT":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type LoginRequestBody struct {
	Type Type `json:"type"`
}

func (o *LoginRequestBody) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

// LoginResponseBody - The api key to use for authenticated endpoints.
type LoginResponseBody struct {
	Token *string `json:"token,omitempty"`
}

func (o *LoginResponseBody) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

type LoginResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// An unknown error occurred interacting with the API.
	Error *components.Error
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The api key to use for authenticated endpoints.
	Object *LoginResponseBody
}

func (o *LoginResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *LoginResponse) GetError() *components.Error {
	if o == nil {
		return nil
	}
	return o.Error
}

func (o *LoginResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *LoginResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *LoginResponse) GetObject() *LoginResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
